#!/bin/bash
#Nombre del archivo: algoritmosBusqueda
#Fecha de creación: jue feb 15 21:44:46 CET 2018
#Autor: joaalsai
#Descripción del script: 
#Ejemplo:

function rellenar {
	for i in `seq 1 $1`
	do
		v+=($RANDOM)
	done
}

function intercambiar() {
	aux=${v[$1]}
	v[$1]=${v[$2]}
	v[$2]=$aux
}

function Quicksort() {
	izq=$1
	der=$2
	let medio=($izq+$der)/2
	pivote=${v[$medio]}

#	Avanzamos izq hasta encontrar un elemento que deba estar a la derecha del pivote,
#	igualmente el indice derecho hasta encontrar un elemento que deba estar a la izquierda
#	del pivote. Si los indices no se han cruzado realizamos el intercambio.
	while [[ izq -le der ]]; do
		while [[ ${v[$izq]} -lt $pivote ]]; do
			#statements
			let izq=$izq+1
		done
		while [[ ${v[der]} -gt $pivote ]]; do
			#statements
			let der=$der-1
		done
		if [[ $izq -le $der ]]; then
			#statements
			intercambiar $izq $der
			let izq=$izq+1
			let der=$der-1
		fi
	done

# 	// Si el indiador derecho se ha desplazado realizamos _Quicksort de la parte derecha
	if [[ $1 -lt $der ]]; then
		#statements
		Quicksort $1 $der
	fi

#	// Si el indiador izquierdo se ha desplazado realizamos _Quicksort de la parte derecha
	if [[ $izq -lt $2 ]]; then
		#statements
		Quicksort $izq $2
	fi
}

function busquedaIterativa() {
	elemento=$1
	for i in ${!v[*]}
	do
		if [ ${v[$i]} -eq $elemento ]
		then
			break;
		fi
	done
	if [ ${v[$i]} -ne $elemento ]
	then
		echo "No encontrado"
	else
		echo $i
	fi
}

function busquedaRecursiva() {
	
	elemento=$1
	local limiteInferior=$2
	local limiteSuperior=$3

	# Calculamos el punto medio del vector
	medio=$((($limiteSuperior+$limiteInferior)/2))

	# Si el punto medio del vector es el elemento buscado, devolvemos su posicion
	if [ ${v[$medio]} -eq $elemento ]
	then
		echo $medio
	# Comprobamos en que lado del vector puede estar el elemento y actualizamos limites.
	elif [ $limiteInferior -lt $limiteSuperior ]
		then
			if [ ${v[$medio]} -gt $elemento ]
			then
				limiteSuperior=$(($medio-1))
			else
				limiteInferior=$(($medio+1))
			fi
			# Realizamos busqueda recursiva en un ventor de longitud/2
			busquedaRecursiva $elemento $limiteInferior $limiteSuperior	
	else
		# El elemento no ha sido encontrado
		echo "No encontrado"
	fi
}

function encontrarOcurruncias() {
	
	# Buscamos la posicion del elemento
	local posicion=`busquedaRecursiva $1 0 $((${#v[*]}-1))`
	
	# Comprobamos si ha sido encontrado el elemento
	if [ "$posicion" != "No encontrado" ]
	then

		local izq=$(($posicion-1))
		local der=$(($posicion+1))

		# Retrocedemos el puntero izq mientras el elemento en esa poscion sea igual.
		while [ ${v[$izq]} -eq $1 ]
		do
			let izq=$izq-1
		done

		# Avanzamos el puntero der mientras el elemento en esa poscion sea igual.
		while [ ${v[$der]} -eq $1 ]
		do
			let der=$der+1
		done

		# Devolvemos la posicion izq y der acutalizadas con las ocurrencias encontradas.
		echo $(($izq+1)) $(($der-1))
	else
		echo "No encontrado"
	fi
}

read -e -p "De cuantos elementos quieres el vector?: " cantidad
rellenar $cantidad

#echo "Ordenando..."
#Quicksort 0 $((${#v[*]}-1)) 
#echo "Vector ordenado!."
v=(1 2 3 4 5 6 7 7 7 7 8 9 20 20 152 555)

read -e -p "Que elementos quieres buscar?: " element

echo "El elemento que buscas esta en la posicion: "`busquedaIterativa $element`", encontrado por metodo iterativo."
echo "El elemento que buscas esta en la posicion: "`busquedaRecursiva $element 0 $((${#v[*]}-1))`", encontrado por metodo recursivo."
echo "El elemento que buscas esta en las posiciones comprendidas entre: `encontrarOcurruncias $element`"

